<?xml version="1.0" encoding="UTF-8"?>
<!--
  - Application context definition for JPetStore's business layer.
  - Contains bean references to the transaction manager and to the DAOs in
  - dataAccessContext-local/jta.xml (see web.xml's "contextConfigLocation").
  -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
    	http://www.springframework.org/schema/context/spring-context.xsd
     	http://www.springframework.org/schema/aop 
      	http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx.xsd">

	<context:component-scan base-package="com.example.jpetstore.service" /> 

	<!-- Generic validator for Account objects, to be used for example by the Spring web tier -->
<!-- <bean id="accountValidator" class="com.example.jpetstore.service.AccountFormValidator"/> -->

	<!-- Generic validator for Order objects, to be used for example by the Spring web tier -->
<!-- <bean id="orderValidator" class="com.example.jpetstore.service.OrderValidator"/> -->

	<!-- JPetStore primary business object: default implementation -->
<!--
	<bean id="petStore" class="com.example.jpetstore.service.PetStoreImpl">
		<property name="accountDao" ref="accountDao"/>
		<property name="categoryDao" ref="categoryDao"/>
		<property name="productDao" ref="productDao"/>
		<property name="itemDao" ref="itemDao"/>
		<property name="orderDao" ref="orderDao"/>
	</bean> 
-->
	<!-- This creates the full auto-proxy infrastructure that is necessary for applying 
		Spring's Transactional annotation. By default, it will refer to the transaction 
		manager bean named "transactionManager". -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- AOP advice used to send confirmation email after order has been submitted -->
<!--
	<bean id="emailAdvice" class="com.example.jpetstore.service.SendOrderConfirmationEmailAdvice">
		<property name="mailSender" ref="mailSender"/>
	</bean>	
	<aop:config>
		This definition creates auto-proxy infrastructure based on the given pointcut,
		expressed in AspectJ pointcut language. Here: applying the advice named
		"emailAdvice" to insertOrder(Order) method of PetStoreImpl 
		<aop:advisor pointcut="execution(* *..PetStoreFacade.insertOrder(*..Order))" advice-ref="emailAdvice"/>
	</aop:config>
-->
</beans>